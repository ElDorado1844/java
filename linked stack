package practiceForTermwork;
import static java.lang.System.exit;
class Stack123{
	int []stk;
	int top=-1;
	
	public Stack123(int n) {
		stk=new int[n];
	}
	
	void push(int n) {
		if(top==stk.length-1) {
			System.out.println("Overflow");
			return;
		}
		stk[++top]=n;
	}
	
	int pop(){
		if(top==-1) {
			System.out.println("Underflow");
			return -1;
		}
		return stk[top--];
	}
	
	void display() {
		for(int j=0;j<=top;j++)
			System.out.println(stk[j]);
	}
}

class LinkedStack extends Stack{
	private class Node{
		int data;
		Node next;
	}
	Node top;
	
	LinkedStack() {
		super(5);
		this.top=null;
	}
	
	public void push(int item) {
		Node temp=new Node();
		if(temp==null) {
			System.out.println("Heap overflow");
			exit(1);
		}
		temp.data=item;
		temp.next=top;
		top=temp;
	}
	
	public int pop() {
		if(top==null) {
			System.out.println("Stack underflow");
			exit(1);
		}
		int item=top.data;
			top=(top).next;
			return item;
	}
	
	public void display() {
		if(top==null) {
			System.out.println("Stack underflow");
			exit(1);
		}
		Node tempNode=new Node();
		tempNode=top;
		System.out.println("The elements in the stack are:");
		while (tempNode!=null) {
			System.out.print(tempNode.data+"->");
			tempNode=tempNode.next;
		}
	}
}

public class TW17 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		LinkedStack s1=new LinkedStack();
		s1.push(10);
		s1.push(15);
		s1.display();
	}

}
